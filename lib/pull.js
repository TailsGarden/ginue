const fs = require('fs')
const path = require('path')
const request = require('request-promise')
const _ = require('lodash')
const { prettyln, trim, createFilePath } = require('./util')
const { createUrl, createHeaders } = require('./client')
const { convertAppIdToName } = require('./converter')

const prettier = require('prettier')
// .prettierrcがあればそれに沿ってフォーマット
const prettierOptions = prettier.resolveConfig.sync(process.cwd()) || {}
// parserを指定しないと警告が出るのでその対策
prettierOptions.parser = prettierOptions.parser || 'babel'

const compare = (i, j) => {
  if (i < j) {
    return -1
  } else if (i > j) {
    return 1
  }
  return 0
}

const sortObj = (ktn, kintoneInfoObj) => {
  switch (ktn.command) {
    case 'app/form/fields.json': {
      const keys = Object.keys(kintoneInfoObj.properties)
      keys.sort()
      return keys.reduce((obj, key) => {
        const property = _.cloneDeep(kintoneInfoObj.properties[key])
        if (property.lookup) {
          property.lookup.fieldMappings.sort((i, j) => compare(i.field, j.field))
        }
        obj[key] = property
        return obj
      }, {})
    }
    case 'field/acl.json': {
      const rights = _.cloneDeep(kintoneInfoObj.rights)
      rights.sort((i, j) => compare(i.code, j.code))
      return { rights }
    }
    case 'form.json': {
      const properties = _.cloneDeep(kintoneInfoObj.properties)
      const compareFormJson = (i, j) => {
        // 要素によって存在しないプロパティがあるので、3種類の優先順位付けでソート
        if (i.code && j.code) {
          return compare(i.code, j.code)
        } else if (i.code) {
          return -1
        } else if (j.code) {
          return 1
        } else if (i.label && j.label) {
          return compare(i.label, j.label)
        } else if (i.label) {
          return -1
        } else if (j.label) {
          return 1
        } else if (i.elementId && j.elementId) {
          return compare(i.elementId, j.elementId)
        } else if (i.elementId) {
          return -1
        } else if (j.elementId) {
          return 1
        }
        return 0
      }
      properties.sort(compareFormJson)
      properties.forEach((property) => {
        if (property.type === 'SUBTABLE') {
          property.fields.sort(compareFormJson)
        }
      })
      return { properties }
    }
  }
  return kintoneInfoObj
}

const createGetUrl = (ktn) => {
  // TODO: 保存ファイル名に影響を与えないための処理だけどイマイチ。今後直す。
  ktn = Object.assign({}, ktn)
  if (ktn.preview) {
    ktn.command = `preview/${ktn.command}`
  }
  const baseUrl = createUrl(ktn)
  return `${baseUrl}?${ktn.appParam}=${ktn.appId}`
}

const fetchKintoneInfo = async (ktn, opts) => {
  const options = {
    url: createGetUrl(ktn),
    headers: createHeaders(ktn),
    json: true,
  }
  const kintoneInfoObj = await request(options)

  let kintoneRevision
  if (kintoneInfoObj.revision) {
    kintoneRevision = prettyln({ revision: kintoneInfoObj.revision })
    delete kintoneInfoObj.revision
  }
  const kintoneInfo = prettyln(kintoneInfoObj)

  let kintoneInfoAlt
  if (opts.alt && (convertAppIdToName(ktn, kintoneInfoObj) || ktn.command === 'field/acl.json')) {
    const sortedObj = sortObj(ktn, kintoneInfoObj)
    kintoneInfoAlt = prettyln(sortedObj)
  }

  return [kintoneInfo, kintoneRevision, kintoneInfoAlt]
}

const saveKintoneInfo = async (filePath, kintoneInfo) => {
  const extension = path.extname(filePath)
  if (extension === '.js') {
    kintoneInfo = prettier.format(
      trim(`
// Generated by ginue
module.exports = ${kintoneInfo}
`),
      prettierOptions
    )
  }
  fs.writeFileSync(filePath, kintoneInfo)
}

exports.ginuePull = async (ktn, opts) => {
  if (!ktn.methods.includes('GET')) {
    return
  }
  const [kintoneInfo, kintoneRevision, kintoneInfoAlt] = await fetchKintoneInfo(ktn, opts)
  const filePath = createFilePath(ktn, opts)
  console.log(filePath)
  saveKintoneInfo(filePath, kintoneInfo)
  if (kintoneRevision) {
    // TODO: 無駄に何回も上書保存するので、フラグを持たせて1回だけにしたい
    const revisionFilePath = createFilePath(ktn, opts, 'revision.json')
    saveKintoneInfo(revisionFilePath, kintoneRevision)
  }
  if (kintoneInfoAlt) {
    const altFilePath = filePath.replace('.js', '-alt.js') // (.json|.js) どっちにも対応するhack。。。
    console.log(altFilePath)
    saveKintoneInfo(altFilePath, kintoneInfoAlt)
  }
}
